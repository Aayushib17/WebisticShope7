{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport barSeriesFormatter from '../BarChart/formatter';\nimport scatterSeriesFormatter from '../ScatterChart/formatter';\nimport lineSeriesFormatter from '../LineChart/formatter';\nimport pieSeriesFormatter from '../PieChart/formatter';\nimport { defaultizeColor } from '../internals/defaultizeColor';\nimport { blueberryTwilightPalette } from '../colorPalettes';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var SeriesContext = /*#__PURE__*/React.createContext({});\nvar seriesTypeFormatter = {\n  bar: barSeriesFormatter,\n  scatter: scatterSeriesFormatter,\n  line: lineSeriesFormatter,\n  pie: pieSeriesFormatter\n};\n\n/**\n * This methods is the interface between what the developer is providing and what components receives\n * To simplify the components behaviors, it groups series by type, such that LinePlots props are not updated if some line data are modified\n * It also add defaultized values such as the ids, colors\n * @param series The array of series provided by devs\n * @param colors The color palette used to defaultize series colors\n * @returns An object structuring all the series by type.\n */\nvar formatSeries = function formatSeries(series, colors, dataset) {\n  // Group series by type\n  var seriesGroups = {};\n  series.forEach(function (seriesData, seriesIndex) {\n    var _seriesGroups$type;\n    var _seriesData$id = seriesData.id,\n      id = _seriesData$id === void 0 ? \"auto-generated-id-\".concat(seriesIndex) : _seriesData$id,\n      type = seriesData.type;\n    if (seriesGroups[type] === undefined) {\n      seriesGroups[type] = {\n        series: {},\n        seriesOrder: []\n      };\n    }\n    if (((_seriesGroups$type = seriesGroups[type]) == null ? void 0 : _seriesGroups$type.series[id]) !== undefined) {\n      throw new Error(\"MUI: series' id \\\"\".concat(id, \"\\\" is not unique\"));\n    }\n    seriesGroups[type].series[id] = _extends({\n      id: id\n    }, defaultizeColor(seriesData, seriesIndex, colors));\n    seriesGroups[type].seriesOrder.push(id);\n  });\n  var formattedSeries = {};\n  // Apply formater on a type group\n  Object.keys(seriesTypeFormatter).forEach(function (type) {\n    if (seriesGroups[type] !== undefined) {\n      var _seriesTypeFormatter$, _seriesTypeFormatter$2;\n      formattedSeries[type] = (_seriesTypeFormatter$ = (_seriesTypeFormatter$2 = seriesTypeFormatter[type]) == null ? void 0 : _seriesTypeFormatter$2.call(seriesTypeFormatter, seriesGroups[type], dataset)) != null ? _seriesTypeFormatter$ : seriesGroups[type];\n    }\n  });\n  return formattedSeries;\n};\nexport function SeriesContextProvider(_ref) {\n  var series = _ref.series,\n    dataset = _ref.dataset,\n    _ref$colors = _ref.colors,\n    colors = _ref$colors === void 0 ? blueberryTwilightPalette : _ref$colors,\n    children = _ref.children;\n  var theme = useTheme();\n  var formattedSeries = React.useMemo(function () {\n    return formatSeries(series, typeof colors === 'function' ? colors(theme.palette.mode) : colors, dataset);\n  }, [series, colors, theme.palette.mode, dataset]);\n  return /*#__PURE__*/_jsx(SeriesContext.Provider, {\n    value: formattedSeries,\n    children: children\n  });\n}","map":{"version":3,"names":["_extends","React","useTheme","barSeriesFormatter","scatterSeriesFormatter","lineSeriesFormatter","pieSeriesFormatter","defaultizeColor","blueberryTwilightPalette","jsx","_jsx","SeriesContext","createContext","seriesTypeFormatter","bar","scatter","line","pie","formatSeries","series","colors","dataset","seriesGroups","forEach","seriesData","seriesIndex","_seriesGroups$type","_seriesData$id","id","concat","type","undefined","seriesOrder","Error","push","formattedSeries","Object","keys","_seriesTypeFormatter$","_seriesTypeFormatter$2","call","SeriesContextProvider","_ref","_ref$colors","children","theme","useMemo","palette","mode","Provider","value"],"sources":["C:/Users/HP/OneDrive/Desktop/Fitpeo/fitpeo/node_modules/@mui/x-charts/esm/context/SeriesContextProvider.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport barSeriesFormatter from '../BarChart/formatter';\nimport scatterSeriesFormatter from '../ScatterChart/formatter';\nimport lineSeriesFormatter from '../LineChart/formatter';\nimport pieSeriesFormatter from '../PieChart/formatter';\nimport { defaultizeColor } from '../internals/defaultizeColor';\nimport { blueberryTwilightPalette } from '../colorPalettes';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const SeriesContext = /*#__PURE__*/React.createContext({});\nconst seriesTypeFormatter = {\n  bar: barSeriesFormatter,\n  scatter: scatterSeriesFormatter,\n  line: lineSeriesFormatter,\n  pie: pieSeriesFormatter\n};\n\n/**\n * This methods is the interface between what the developer is providing and what components receives\n * To simplify the components behaviors, it groups series by type, such that LinePlots props are not updated if some line data are modified\n * It also add defaultized values such as the ids, colors\n * @param series The array of series provided by devs\n * @param colors The color palette used to defaultize series colors\n * @returns An object structuring all the series by type.\n */\nconst formatSeries = (series, colors, dataset) => {\n  // Group series by type\n  const seriesGroups = {};\n  series.forEach((seriesData, seriesIndex) => {\n    var _seriesGroups$type;\n    const {\n      id = `auto-generated-id-${seriesIndex}`,\n      type\n    } = seriesData;\n    if (seriesGroups[type] === undefined) {\n      seriesGroups[type] = {\n        series: {},\n        seriesOrder: []\n      };\n    }\n    if (((_seriesGroups$type = seriesGroups[type]) == null ? void 0 : _seriesGroups$type.series[id]) !== undefined) {\n      throw new Error(`MUI: series' id \"${id}\" is not unique`);\n    }\n    seriesGroups[type].series[id] = _extends({\n      id\n    }, defaultizeColor(seriesData, seriesIndex, colors));\n    seriesGroups[type].seriesOrder.push(id);\n  });\n  const formattedSeries = {};\n  // Apply formater on a type group\n  Object.keys(seriesTypeFormatter).forEach(type => {\n    if (seriesGroups[type] !== undefined) {\n      var _seriesTypeFormatter$, _seriesTypeFormatter$2;\n      formattedSeries[type] = (_seriesTypeFormatter$ = (_seriesTypeFormatter$2 = seriesTypeFormatter[type]) == null ? void 0 : _seriesTypeFormatter$2.call(seriesTypeFormatter, seriesGroups[type], dataset)) != null ? _seriesTypeFormatter$ : seriesGroups[type];\n    }\n  });\n  return formattedSeries;\n};\nexport function SeriesContextProvider({\n  series,\n  dataset,\n  colors = blueberryTwilightPalette,\n  children\n}) {\n  const theme = useTheme();\n  const formattedSeries = React.useMemo(() => formatSeries(series, typeof colors === 'function' ? colors(theme.palette.mode) : colors, dataset), [series, colors, theme.palette.mode, dataset]);\n  return /*#__PURE__*/_jsx(SeriesContext.Provider, {\n    value: formattedSeries,\n    children: children\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}