{"ast":null,"code":"import _toConsumableArray from \"C:/Users/HP/OneDrive/Desktop/Fitpeo/fitpeo/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { SeriesContext } from '../context/SeriesContextProvider';\nimport { CartesianContext } from '../context/CartesianContextProvider';\nimport { BarElement } from './BarElement';\nimport { isBandScaleConfig } from '../models/axis';\n\n/**\n * Solution of the equations\n * W = barWidth * N + offset * (N-1)\n * offset / (offset + barWidth) = r\n * @param bandWidth The width available to place bars.\n * @param numberOfGroups The number of bars to place in that space.\n * @param gapRatio The ratio of the gap between bars over the bar width.\n * @returns The bar width and the offset between bars.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction getBandSize(_ref) {\n  var W = _ref.bandWidth,\n    N = _ref.numberOfGroups,\n    r = _ref.gapRatio;\n  if (r === 0) {\n    return {\n      barWidth: W / N,\n      offset: 0\n    };\n  }\n  var barWidth = W / (N + (N - 1) * r);\n  var offset = r * barWidth;\n  return {\n    barWidth: barWidth,\n    offset: offset\n  };\n}\nfunction BarPlot(props) {\n  var seriesData = React.useContext(SeriesContext).bar;\n  var axisData = React.useContext(CartesianContext);\n  if (seriesData === undefined) {\n    return null;\n  }\n  var series = seriesData.series,\n    stackingGroups = seriesData.stackingGroups;\n  var xAxis = axisData.xAxis,\n    yAxis = axisData.yAxis,\n    xAxisIds = axisData.xAxisIds,\n    yAxisIds = axisData.yAxisIds;\n  var defaultXAxisId = xAxisIds[0];\n  var defaultYAxisId = yAxisIds[0];\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: stackingGroups.flatMap(function (_ref2, groupIndex) {\n      var groupIds = _ref2.ids;\n      return groupIds.flatMap(function (seriesId) {\n        var _series$seriesId$xAxi, _series$seriesId$yAxi;\n        var xAxisKey = (_series$seriesId$xAxi = series[seriesId].xAxisKey) != null ? _series$seriesId$xAxi : defaultXAxisId;\n        var yAxisKey = (_series$seriesId$yAxi = series[seriesId].yAxisKey) != null ? _series$seriesId$yAxi : defaultYAxisId;\n        var xAxisConfig = xAxis[xAxisKey];\n        var yAxisConfig = yAxis[yAxisKey];\n        var verticalLayout = series[seriesId].layout === 'vertical';\n        var baseScaleConfig;\n        if (verticalLayout) {\n          if (!isBandScaleConfig(xAxisConfig)) {\n            throw new Error(\"Axis with id \\\"\".concat(xAxisKey, \"\\\" shoud be of type \\\"band\\\" to display the bar series of id \\\"\").concat(seriesId, \"\\\"\"));\n          }\n          if (xAxis[xAxisKey].data === undefined) {\n            throw new Error(\"Axis with id \\\"\".concat(xAxisKey, \"\\\" shoud have data property\"));\n          }\n          baseScaleConfig = xAxisConfig;\n        } else {\n          if (!isBandScaleConfig(yAxisConfig)) {\n            throw new Error(\"Axis with id \\\"\".concat(yAxisKey, \"\\\" shoud be of type \\\"band\\\" to display the bar series of id \\\"\").concat(seriesId, \"\\\"\"));\n          }\n          if (yAxis[yAxisKey].data === undefined) {\n            throw new Error(\"Axis with id \\\"\".concat(xAxisKey, \"\\\" shoud have data property\"));\n          }\n          baseScaleConfig = yAxisConfig;\n        }\n        var xScale = xAxisConfig.scale;\n        var yScale = yAxisConfig.scale;\n        var bandWidth = baseScaleConfig.scale.bandwidth();\n        var _getBandSize = getBandSize({\n            bandWidth: bandWidth,\n            numberOfGroups: stackingGroups.length,\n            gapRatio: baseScaleConfig.barGapRatio\n          }),\n          barWidth = _getBandSize.barWidth,\n          offset = _getBandSize.offset;\n        var barOffset = groupIndex * (barWidth + offset);\n        var _series$seriesId = series[seriesId],\n          stackedData = _series$seriesId.stackedData,\n          color = _series$seriesId.color;\n        return stackedData.map(function (values, dataIndex) {\n          var _xAxis$xAxisKey$data, _yAxis$yAxisKey$data;\n          var baseline = Math.min.apply(Math, _toConsumableArray(values));\n          var value = Math.max.apply(Math, _toConsumableArray(values));\n          return /*#__PURE__*/_jsx(BarElement, _extends({\n            id: seriesId,\n            dataIndex: dataIndex,\n            x: verticalLayout ? xScale((_xAxis$xAxisKey$data = xAxis[xAxisKey].data) == null ? void 0 : _xAxis$xAxisKey$data[dataIndex]) + barOffset : xScale(baseline),\n            y: verticalLayout ? yScale(value) : yScale((_yAxis$yAxisKey$data = yAxis[yAxisKey].data) == null ? void 0 : _yAxis$yAxisKey$data[dataIndex]) + barOffset,\n            height: verticalLayout ? Math.abs(yScale(baseline) - yScale(value)) : barWidth,\n            width: verticalLayout ? barWidth : Math.abs(xScale(baseline) - xScale(value)),\n            color: color,\n            highlightScope: series[seriesId].highlightScope\n          }, props), \"\".concat(seriesId, \"-\").concat(dataIndex));\n        });\n      });\n    })\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? BarPlot.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object\n} : void 0;\nexport { BarPlot };","map":{"version":3,"names":["_extends","React","PropTypes","SeriesContext","CartesianContext","BarElement","isBandScaleConfig","jsx","_jsx","getBandSize","_ref","W","bandWidth","N","numberOfGroups","r","gapRatio","barWidth","offset","BarPlot","props","seriesData","useContext","bar","axisData","undefined","series","stackingGroups","xAxis","yAxis","xAxisIds","yAxisIds","defaultXAxisId","defaultYAxisId","Fragment","children","flatMap","_ref2","groupIndex","groupIds","ids","seriesId","_series$seriesId$xAxi","_series$seriesId$yAxi","xAxisKey","yAxisKey","xAxisConfig","yAxisConfig","verticalLayout","layout","baseScaleConfig","Error","concat","data","xScale","scale","yScale","bandwidth","_getBandSize","length","barGapRatio","barOffset","_series$seriesId","stackedData","color","map","values","dataIndex","_xAxis$xAxisKey$data","_yAxis$yAxisKey$data","baseline","Math","min","apply","_toConsumableArray","value","max","id","x","y","height","abs","width","highlightScope","process","env","NODE_ENV","propTypes","slotProps","object","slots"],"sources":["C:/Users/HP/OneDrive/Desktop/Fitpeo/fitpeo/node_modules/@mui/x-charts/esm/BarChart/BarPlot.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { SeriesContext } from '../context/SeriesContextProvider';\nimport { CartesianContext } from '../context/CartesianContextProvider';\nimport { BarElement } from './BarElement';\nimport { isBandScaleConfig } from '../models/axis';\n\n/**\n * Solution of the equations\n * W = barWidth * N + offset * (N-1)\n * offset / (offset + barWidth) = r\n * @param bandWidth The width available to place bars.\n * @param numberOfGroups The number of bars to place in that space.\n * @param gapRatio The ratio of the gap between bars over the bar width.\n * @returns The bar width and the offset between bars.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction getBandSize({\n  bandWidth: W,\n  numberOfGroups: N,\n  gapRatio: r\n}) {\n  if (r === 0) {\n    return {\n      barWidth: W / N,\n      offset: 0\n    };\n  }\n  const barWidth = W / (N + (N - 1) * r);\n  const offset = r * barWidth;\n  return {\n    barWidth,\n    offset\n  };\n}\nfunction BarPlot(props) {\n  const seriesData = React.useContext(SeriesContext).bar;\n  const axisData = React.useContext(CartesianContext);\n  if (seriesData === undefined) {\n    return null;\n  }\n  const {\n    series,\n    stackingGroups\n  } = seriesData;\n  const {\n    xAxis,\n    yAxis,\n    xAxisIds,\n    yAxisIds\n  } = axisData;\n  const defaultXAxisId = xAxisIds[0];\n  const defaultYAxisId = yAxisIds[0];\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: stackingGroups.flatMap(({\n      ids: groupIds\n    }, groupIndex) => {\n      return groupIds.flatMap(seriesId => {\n        var _series$seriesId$xAxi, _series$seriesId$yAxi;\n        const xAxisKey = (_series$seriesId$xAxi = series[seriesId].xAxisKey) != null ? _series$seriesId$xAxi : defaultXAxisId;\n        const yAxisKey = (_series$seriesId$yAxi = series[seriesId].yAxisKey) != null ? _series$seriesId$yAxi : defaultYAxisId;\n        const xAxisConfig = xAxis[xAxisKey];\n        const yAxisConfig = yAxis[yAxisKey];\n        const verticalLayout = series[seriesId].layout === 'vertical';\n        let baseScaleConfig;\n        if (verticalLayout) {\n          if (!isBandScaleConfig(xAxisConfig)) {\n            throw new Error(`Axis with id \"${xAxisKey}\" shoud be of type \"band\" to display the bar series of id \"${seriesId}\"`);\n          }\n          if (xAxis[xAxisKey].data === undefined) {\n            throw new Error(`Axis with id \"${xAxisKey}\" shoud have data property`);\n          }\n          baseScaleConfig = xAxisConfig;\n        } else {\n          if (!isBandScaleConfig(yAxisConfig)) {\n            throw new Error(`Axis with id \"${yAxisKey}\" shoud be of type \"band\" to display the bar series of id \"${seriesId}\"`);\n          }\n          if (yAxis[yAxisKey].data === undefined) {\n            throw new Error(`Axis with id \"${xAxisKey}\" shoud have data property`);\n          }\n          baseScaleConfig = yAxisConfig;\n        }\n        const xScale = xAxisConfig.scale;\n        const yScale = yAxisConfig.scale;\n        const bandWidth = baseScaleConfig.scale.bandwidth();\n        const {\n          barWidth,\n          offset\n        } = getBandSize({\n          bandWidth,\n          numberOfGroups: stackingGroups.length,\n          gapRatio: baseScaleConfig.barGapRatio\n        });\n        const barOffset = groupIndex * (barWidth + offset);\n        const {\n          stackedData,\n          color\n        } = series[seriesId];\n        return stackedData.map((values, dataIndex) => {\n          var _xAxis$xAxisKey$data, _yAxis$yAxisKey$data;\n          const baseline = Math.min(...values);\n          const value = Math.max(...values);\n          return /*#__PURE__*/_jsx(BarElement, _extends({\n            id: seriesId,\n            dataIndex: dataIndex,\n            x: verticalLayout ? xScale((_xAxis$xAxisKey$data = xAxis[xAxisKey].data) == null ? void 0 : _xAxis$xAxisKey$data[dataIndex]) + barOffset : xScale(baseline),\n            y: verticalLayout ? yScale(value) : yScale((_yAxis$yAxisKey$data = yAxis[yAxisKey].data) == null ? void 0 : _yAxis$yAxisKey$data[dataIndex]) + barOffset,\n            height: verticalLayout ? Math.abs(yScale(baseline) - yScale(value)) : barWidth,\n            width: verticalLayout ? barWidth : Math.abs(xScale(baseline) - xScale(value)),\n            color: color,\n            highlightScope: series[seriesId].highlightScope\n          }, props), `${seriesId}-${dataIndex}`);\n        });\n      });\n    })\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? BarPlot.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object\n} : void 0;\nexport { BarPlot };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}