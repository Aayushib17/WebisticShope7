{"ast":null,"code":"import * as React from 'react';\nimport { CartesianContext } from '../context/CartesianContextProvider';\nimport { isBandScale } from '../internals/isBandScale';\n/**\n * For a given scale return a function that map value to their position.\n * Usefull when dealing with specific scale such as band.\n * @param scale The scale to use\n * @returns (value: any) => number\n */\nexport function getValueToPositionMapper(scale) {\n  if (isBandScale(scale)) {\n    return function (value) {\n      return scale(value) + scale.bandwidth() / 2;\n    };\n  }\n  return function (value) {\n    return scale(value);\n  };\n}\nexport function useXScale(identifier) {\n  var _React$useContext = React.useContext(CartesianContext),\n    xAxis = _React$useContext.xAxis,\n    xAxisIds = _React$useContext.xAxisIds;\n  var id = typeof identifier === 'string' ? identifier : xAxisIds[identifier != null ? identifier : 0];\n  return xAxis[id].scale;\n}\nexport function useYScale(identifier) {\n  var _React$useContext2 = React.useContext(CartesianContext),\n    yAxis = _React$useContext2.yAxis,\n    yAxisIds = _React$useContext2.yAxisIds;\n  var id = typeof identifier === 'string' ? identifier : yAxisIds[identifier != null ? identifier : 0];\n  return yAxis[id].scale;\n}","map":{"version":3,"names":["React","CartesianContext","isBandScale","getValueToPositionMapper","scale","value","bandwidth","useXScale","identifier","_React$useContext","useContext","xAxis","xAxisIds","id","useYScale","_React$useContext2","yAxis","yAxisIds"],"sources":["C:/Users/HP/OneDrive/Desktop/Fitpeo/fitpeo/node_modules/@mui/x-charts/esm/hooks/useScale.js"],"sourcesContent":["import * as React from 'react';\nimport { CartesianContext } from '../context/CartesianContextProvider';\nimport { isBandScale } from '../internals/isBandScale';\n/**\n * For a given scale return a function that map value to their position.\n * Usefull when dealing with specific scale such as band.\n * @param scale The scale to use\n * @returns (value: any) => number\n */\nexport function getValueToPositionMapper(scale) {\n  if (isBandScale(scale)) {\n    return value => scale(value) + scale.bandwidth() / 2;\n  }\n  return value => scale(value);\n}\nexport function useXScale(identifier) {\n  const {\n    xAxis,\n    xAxisIds\n  } = React.useContext(CartesianContext);\n  const id = typeof identifier === 'string' ? identifier : xAxisIds[identifier != null ? identifier : 0];\n  return xAxis[id].scale;\n}\nexport function useYScale(identifier) {\n  const {\n    yAxis,\n    yAxisIds\n  } = React.useContext(CartesianContext);\n  const id = typeof identifier === 'string' ? identifier : yAxisIds[identifier != null ? identifier : 0];\n  return yAxis[id].scale;\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,gBAAgB,QAAQ,qCAAqC;AACtE,SAASC,WAAW,QAAQ,0BAA0B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,wBAAwBA,CAACC,KAAK,EAAE;EAC9C,IAAIF,WAAW,CAACE,KAAK,CAAC,EAAE;IACtB,OAAO,UAAAC,KAAK;MAAA,OAAID,KAAK,CAACC,KAAK,CAAC,GAAGD,KAAK,CAACE,SAAS,CAAC,CAAC,GAAG,CAAC;IAAA;EACtD;EACA,OAAO,UAAAD,KAAK;IAAA,OAAID,KAAK,CAACC,KAAK,CAAC;EAAA;AAC9B;AACA,OAAO,SAASE,SAASA,CAACC,UAAU,EAAE;EACpC,IAAAC,iBAAA,GAGIT,KAAK,CAACU,UAAU,CAACT,gBAAgB,CAAC;IAFpCU,KAAK,GAAAF,iBAAA,CAALE,KAAK;IACLC,QAAQ,GAAAH,iBAAA,CAARG,QAAQ;EAEV,IAAMC,EAAE,GAAG,OAAOL,UAAU,KAAK,QAAQ,GAAGA,UAAU,GAAGI,QAAQ,CAACJ,UAAU,IAAI,IAAI,GAAGA,UAAU,GAAG,CAAC,CAAC;EACtG,OAAOG,KAAK,CAACE,EAAE,CAAC,CAACT,KAAK;AACxB;AACA,OAAO,SAASU,SAASA,CAACN,UAAU,EAAE;EACpC,IAAAO,kBAAA,GAGIf,KAAK,CAACU,UAAU,CAACT,gBAAgB,CAAC;IAFpCe,KAAK,GAAAD,kBAAA,CAALC,KAAK;IACLC,QAAQ,GAAAF,kBAAA,CAARE,QAAQ;EAEV,IAAMJ,EAAE,GAAG,OAAOL,UAAU,KAAK,QAAQ,GAAGA,UAAU,GAAGS,QAAQ,CAACT,UAAU,IAAI,IAAI,GAAGA,UAAU,GAAG,CAAC,CAAC;EACtG,OAAOQ,KAAK,CAACH,EAAE,CAAC,CAACT,KAAK;AACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}